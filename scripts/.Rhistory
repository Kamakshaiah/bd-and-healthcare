abstracts <- read.csv(file.choose(), encoding="UTF-8")
abs <- abstracts$Abstract
class(abs)
dim(abs)
length(abs)
head(abs)
abs[1]
library('tm')
abscorp <- VCorpus(VectorSource(abs))
acorp <- tm_map(abscorp, removePunctuation)
acorp <- tm_map(acorp, removeNumbers)
acorp <- tm_map(acorp, tolower)
acorp <- tm_map(acorp, removeWords, stopwords("en"))
#acorp <- tm_map(acorp, removeWords, c("the", "and", "are", "for", "from", "with", "to", "be", "being", "this", "that", "have", "has", "had", "use", "using", "can", "could", "will", "would", "should", "shall"))
acorp <- tm_map(acorp, stripWhitespace)
tm::inspect(acorp)
dim(tm::inspect(acorp))
adtm <- DocumentTermMatrix(abscorp)
# adtm <- DocumentTermMatrix(abscorp, control = list(weighting = weightTfIdf))
tm::inspect(adtm[10:16, ] )
adtm$dimnames
length(adtm$dimnames)
adtmsparse = removeSparseTerms(adtm, 0.99)
dim(adtmsparse)
adtmsparse$dimnames
adtmsparse = removeSparseTerms(adtm, 0.10)
dim(adtmsparse)
adtmsparse$dimnames
adtmsparse = removeSparseTerms(adtm, 0.30)
dim(adtmsparse)
adtmsparse$dimnames
findFreqTerms(adtmsparse, 30)
head(adtmsparse)
head(as.data.frame(adtmsparse))
head(data.frame(adtmsparse))
tm::inspect(adtmsparse)
tm::inspect(adtmsparse)[11,]
bigdataframe <- tm::inspect(adtmsparse)
names(bigdataframe)
head(bigdataframe)
bigdataf <- tm::inspect(adtmsparse)
head(bigdataframe)
bigdataframe <- data.frame(bigdataf)
bigdataframe
names(bigdataframe)
manova(cbind(big + data + analytics) ~ healthcare, data = bigdataframe)
manova(cbind(big, data, analytics) ~ healthcare, data = bigdataframe)
fit <- manova(cbind(big, data, analytics) ~ healthcare, data = bigdataframe)
sumary(fit)
summary(fit)
fit
anova(fit)
fit <- manova(healthcare ~ big + data + analytics, data = bigdataframe)
fit <- lm(healthcare ~ big + data + analytics, data = bigdataframe)
fit
summary(fit)
anova(fit)
aov(fit)
anova(fit)
bigdataf <- data.frame(as.matrix(adtm), stringsAsFactors=False)
dim(bigdataf)
names(bigdataf)
length(names(bigdataf))
names(bigdataf) %in% c('the')
sum(names(bigdataf) %in% c('the'))
sum(names(bigdataf) %in% c('the', 'and'))
bigdataf[, (names(bigdataf) %in% c('the', 'and'))]
bigdataframe <- subset(bigdataf, select = -c("the", "and", "are", "for", "from", "with", "to", "be", "being", "this", "that", "have", "has", "had", "use", "using", "can", "could", "will", "would", "should", "shall"))
bigdataframe <- subset(bigdataf, select = -c(the, and, are, from, with, to, be, being, this, that, have, has, had, use, using, can, could, will, would, should, shall))
bigdataf[, (names(bigdataf) %in% c('to'))]
bigdataf[, (names(bigdataf) %in% c('for'))]
bigdataframe <- subset(bigdataf, select = -c(the, and, are, from, with, be, being, this, that, have, has, had, use, using, can, could, will, would, should, shall))
bigdataf[, (names(bigdataf) %in% c('are'))]
bigdataf[, (names(bigdataf) %in% c('and'))]
bigdataf[, (names(bigdataf) %in% c('from'))]
bigdataframe <- subset(bigdataf, select = -c(the, and, are, from, with, be, being, this, that, have, has, had, use, using, can, could, will, would, should, shall))
bigdataframe <- subset(bigdataf, select = -c(the, and, are, from, with, being, this, that, have, has, had, use, using, can, could, will, would, should, shall))
bigdataframe <- subset(bigdataf, select = -c(the, and, are, from, with, being, this, that, have, has, use, using, can, could, will, would, should, shall))
bigdataframe <- subset(bigdataf, select = -c(the, and, are, from, with, being, this, that, have, has, use, using, can, could, will, would, should))
names(bigdataframe)
length(names(bigdataframe))
length(names(bigdataframe))
bigdataframe <- bigdataframe[, 123:2971]
length(names(bigdataframe))
names(bigdataframe)
install.packages(c("FactoMinerR", "factoextra"))
fit <- lm(healthcare ~ big + data + analytics, data = bigdataframe)
summary(fit)
anova(fit)
library(FactoMineR)
library(factoextra)
cafit <- FactoMineR::CA(bigdataframe, ncp=2)
cafit <- FactoMineR::CA(bigdataframe, ncp=4)
cafit
get_eigenvalue(cafit)
fviz_screeplot(cafit, addlabels = TRUE, ylim = c(0, 50))
fviz_ca_biplot(cafit, repel = TRUE)
length(names(bigdataframe))
length(names(bigdataframe))
mean(bigdataframe)
is.na(bigdataframe)
summary(bigdataframe[, 1:5])
bigdataframe <- subset(bigdataf, select = -c(about, the, and, are, from, with, being, this, that, have, has, use, using, can, could, will, would, should))
summary(bigdataframe[, 1:5])
summary(bigdataframe[, 6:10])
names(bigdataframe)
bigdataframe <- bigdataframe[, 123:2971]
length(names(bigdataframe)) # 2971
bigdataframe <- bigdataframe[, 123:2970]
summary(bigdataframe[, 6:10])
summary(bigdataframe[, 11:20])
mean(apply(bigdataframe, 2, mean))
max(apply(bigdataframe, 2, mean))
max(apply(bigdataframe, 2, mean)); min(apply(bigdataframe, 2, mean))
mean(max(apply(bigdataframe, 2, mean)); min(apply(bigdataframe, 2, mean)))
mean(max(apply(bigdataframe, 2, mean)), min(apply(bigdataframe, 2, mean)))
max(apply(bigdataframe, 2, mean)); min(apply(bigdataframe, 2, mean)); mean(min(apply(bigdataframe, 2, mean))
max(apply(bigdataframe, 2, mean)); min(apply(bigdataframe, 2, mean)); mean(apply(bigdataframe, 2, mean))
mean(apply(bigdataframe, 2, mean))
max(apply(bigdataframe, 2, mean)); min(apply(bigdataframe, 2, mean))
(4.780488 + 0.02439024)/2
rm(bigdataf)
subset(bigdataframe, select = which(apply(bigdataframe, 2, mean) > 0.24))
bdf <- subset(bigdataframe, select = which(apply(bigdataframe, 2, mean) > 0.24))
names(bdf)
length(names(bdf))
cafit <- FactoMineR::CA(bdf, ncp=2)
get_eigenvalue(cafit)
getwd()
write.csv(get_eigenvalue(cafit), 'eigen-values.csv')
cafit
cafit$col$contrib
write.csv(cafit$col$contrib, 'output/col-contrib.csv')
write.csv(cafit$col$contrib, file.path(output, col-contrib.csv))
getwd()
write.csv(cafit$col$contrib, file.path("output", "col-contrib.csv"))
write.csv(cafit$col$contrib, "col-contrib.csv")
write.csv(cafit$col$coord, "col-coord.csv")
write.csv(cafit$col$cos2, "col-cos2.csv")
write.csv(cafit$row$cos2, "row-cos2.csv")
write.csv(cafit$row$coord, "row-coord.csv")
write.csv(cafit$row$contrib, "row-contrib.csv")
fviz_screeplot(cafit, addlabels = TRUE, ylim = c(0, 50))
fviz_ca_row(res.ca, col.row = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_ca_row(cafit, col.row = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_ca_col(cafit, col.col = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fit <- manova(cbind(clinical, medical, disease, diseases, treatment) ~ big + data + analytics, data = bigdataframe)
summary(fit)
anova(fit)
fit <- manova(cbind(clinical, medical, disease, diseases, treatment) ~ big + data + analytics + technology, data = bigdataframe)
summary(fit)
anova(fit)
bda <- subset(bigdataframe, select = c(big, data, analytics))
head(bda)
names(bigdataframe) %in% c("technology")
sum(names(bigdataframe) %in% c("technology"))
sum(names(bigdataframe) %in% c("technologies"))
bigdataframe[, 'technology']
bigdataframe[, 'technologies']
bdt <- subset(bigdataframe, select = c(big, data, technology, technologies))
head(bda)
head(bdt)
bigdataframe[, 'technics']
sum(names(bigdataframe) %in% c("technics"))
sum(names(bigdataframe) %in% c("techniques"))
bigdataframe[, 'techniques']
bdt <- subset(bigdataframe, select = c(big, data, technology, technologies, techniques))
head(bdt)
bdav <- rowSums(bda)
bdat <- rowSums(bdt)
bigdataframe$bda <- bdav
bigdataframe$bdt <- bdat
fit <- manova(cbind(clinical, medical, disease, diseases, treatment) ~ bda, data = bigdataframe)
summary(fit)
anova(fit)
fit <- manova(cbind(clinical, medical, disease, diseases, treatment) ~ bda, data = bigdataframe)
summary(fit)
anova(fit)
fit <- manova(cbind(clinical, medical, disease, diseases, treatment) ~ bdt, data = bigdataframe)
summary(fit)
anova(fit)
fit <- manova(cbind(clinical, medical, disease, diseases, treatment) ~ big + data + analytics + technology, data = bigdataframe)
summary(fit)
fit <- manova(cbind(clinical, medical, disease, diseases, treatment) ~ big + data + analytics, data = bigdataframe)
summary(fit)
fit <- manova(cbind(clinical, medical, disease, diseases, treatment) ~ big + data + technology + techniques, data = bigdataframe)
summary(fit)
fit <- manova(cbind(clinical, medical, disease, diseases, treatment) ~ bda, data = bigdataframe)
summary(fit)
fit <- manova(cbind(clinical, medical, disease, diseases, treatment) ~ bdt, data = bigdataframe)
summary(fit)
library(psych)
fit <- fa(bigdataframe, 2)
getwd()
write.csv(loadings(fit), 'bda-loadings.csv')
write.csv(fit$r.scores, 'bda-rscores.csv')
structure.diagram(fit)
fa.diagram(fit)
structure.graph(fit)
structure.diagram(fit)
fa.graph(fit)
structure.diagram(fit)
loadings(fit)
fit <- fa(bigdataframe, 2)
bigdataframe[, 'clinical']
sum(names(bigdataframe) %in% c("data"))
sum(names(bigdataframe) %in% c("analyst"))
sum(names(bigdataframe) %in% c("analytics"))
sum(names(bigdataframe) %in% c("social"))
sum(names(bigdataframe) %in% c("managerial"))
sum(names(bigdataframe) %in% c("manage"))
sum(names(bigdataframe) %in% c("management"))
sum(names(bigdataframe) %in% c("management"))
sum(names(bigdataframe) %in% c("security"))
sum(names(bigdataframe) %in% c("fraud"))
bigdataframe [, c("fraud")]
bigdataframe [, c("decisions")]
bdadf <- bigdataframe[, c('big', 'data', 'analytics', 'technology', 'clinical', 'medical', 'social', 'business', 'management', 'security', 'risk', 'fraud', 'decisions', 'model', 'approach', 'patients', 'disease', 'healthcare')]
names(bdadf)
head(bdadf)
names(bdadf)
fit <- fa(bigdataframe, 5)
fit <- fa(bdadf, 5)
loadings(fit)
help('fa')
fit <- fa(bdadf, 5, fm='ols')
fit <- fa(bdadf, 5, fm='wls')
loadings(fit)
# getwd()
write.csv(loadings(fit), 'bda-loadings.csv')
write.csv(fit$r.scores, 'bda-rscores.csv')
structure.diagram(fit)
structure.diagram(fit)
plot(fit)
scree(bdadf)
fit <- fa(bdadf, 2, fm='wls')
loadings(fit)
write.csv(loadings(fit), 'bda-2fs-loadings.csv')
write.csv(fit$r.scores, 'bda-2fs-rscores.csv')
structure.diagram(fit)
structure.diagram(fit)
scree(bdadf)
fit <- fa(bdadf, 7, fm='wls')
loadings(fit)
# getwd()
write.csv(loadings(fit), 'bda-7fs-loadings.csv')
write.csv(fit$r.scores, 'bda-7fs-rscores.csv')
structure.diagram(fit)
